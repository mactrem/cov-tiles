import * as varint from 'varint';

import { FastPFOR } from '../../../../src/encodings/fastpfor/index';
import { arraycopy } from '../../../../src/encodings/fastpfor/util';

const FastPFOR_Raw_Test1: number[] = [ 187114314, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 8, 8, 8,4 ,187114314, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 8, 8, 8,4 ,187114314, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 8, 8, 8,4 ,187114314, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 8, 8, 8,4 ,187114314, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 8, 8, 8,4 ,187114314, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 8, 8, 8,4 ,187114314, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 8, 8, 8,4 ,187114314, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 8, 8, 8,4 ,187114314, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 8, 8, 8,4 ,187114314, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 8, 8, 8,4 ,187114314, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 8, 8, 8,4 ,187114314, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 8, 8, 8,4 ,187114314, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 8, 8, 8,4 ,187114314, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 8, 8, 8,4 ];
const FastPFOR_Raw_Test2: Uint32Array = new Uint32Array([ 1871143144, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7984, 4, 4, 4, 4, 4, 4, 4,4 ,1871143144, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7984, 4, 4, 4, 4, 4, 4, 4,4 ,1871143144, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7984, 4, 4, 4, 4, 4, 4, 4,4 ,1871143144, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7984, 4, 4, 4, 4, 4, 4, 4,4 ,1871143144, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7984, 4, 4, 4, 4, 4, 4, 4,4 ,1871143144, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7984, 4, 4, 4, 4, 4, 4, 4,4 ,1871143144, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7984, 4, 4, 4, 4, 4, 4, 4,4 ,1871143144, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7984, 4, 4, 4, 4, 4, 4, 4,4 ,1871143144, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7984, 4, 4, 4, 4, 4, 4, 4,4 ,1871143144, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7984, 4, 4, 4, 4, 4, 4, 4,4 ,1871143144, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7984, 4, 4, 4, 4, 4, 4, 4,4 ,1871143144, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7984, 4, 4, 4, 4, 4, 4, 4,4 ,1871143144, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7984, 4, 4, 4, 4, 4, 4, 4,4 ,1871143144, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7984, 4, 4, 4, 4, 4, 4, 4,4 ,1871143144, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7984, 4, 4, 4, 4, 4, 4, 4,4 ,1871143144, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7984, 4, 4, 4, 4, 4, 4, 4,4 ,1871143144, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7984, 4, 4, 4, 4, 4, 4, 4,4 ,1871143144, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7984, 4, 4, 4, 4, 4, 4, 4,4 ,1871143144, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7984, 4, 4, 4, 4, 4, 4, 4,4 ,1871143144, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7984, 4, 4, 4, 4, 4, 4, 4,4 ,1871143144, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7984, 4, 4, 4, 4, 4, 4, 4,4 ,1871143144, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7984, 4, 4, 4, 4, 4, 4, 4,4 ,1871143144, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7984, 4, 4, 4, 4, 4, 4, 4,4 ,1871143144, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7984, 4, 4, 4, 4, 4, 4, 4,4 ,1871143144, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7984, 4, 4, 4, 4, 4, 4, 4,4 ,1871143144, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7984, 4, 4, 4, 4, 4, 4, 4,4 ,1871143144, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7984, 4, 4, 4, 4, 4, 4, 4,4 ,1871143144, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7984, 4, 4, 4, 4, 4, 4, 4,4 ,1871143144, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7984, 4, 4, 4, 4, 4, 4, 4,4 ,1871143144, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7984, 4, 4, 4, 4, 4, 4, 4,4 ,1871143144, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7984, 4, 4, 4, 4, 4, 4, 4,4 ]);
const FastPFOR_Compressed_Test1: Uint32Array = new Uint32Array([256, 41, 277094666, -1977546686, 554189328, 138547362, -1575975903, 277094664, -2078209502, 554189328, 138547338, 1108386337, 277094664, -2078209886, 554312208, 138547332, 1108380193, 279060744, -2078209982, 554213904, 170004612, 1108378657, 277487880, -1574893502, 554189328, 144838788, 571507745, 277094666, -1977546686, 554189328, 138547362, -1575975903, 277094664, -2078209502, 554189328, 138547338, 1108386337, 277094664, -2078209886, 554312208, 138547332, 1108380193, 16, 1838341, 1346119700, -1601406876, -253966156, 4194304, 13, -1923532518, 1313254556, -1423498410, -925527151, 1692691145, 447902261, -1668458183, 1447970476, -1851054301, 1427, -2071426936, -652458422, -2004318072, -2004318072, -2003531640, -2004318072, 8685704, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
const FastPFOR_Compressed_Test2: Uint32Array = new Uint32Array([512, 49, 613566752, 153391681, 306783378, 546457892, 1092915785, -1844894574, 605178148, 1226871369, -1841224558, 613550372, 1227100745, -1840701294, 613564708, 1227133449, -1840700398, 613566752, 153391681, 306783378, 546457892, 1092915785, -1844894574, 605178148, 1226871369, -1841224558, 613550372, 1227100745, -1840701294, 613564708, 1227133449, -1840700398, 613566752, 153391681, 306783378, 546457892, 1092915785, -1844894574, 605178148, 1226871369, -1841224558, 613550372, 1227100745, -1840701294, 613564708, 1227133449, -1840700398, 613566752, 153391681, 306783378, 58, 2038275, 673125387, 1346845747, 2020566107, -1600680829, -926960469, -253240109, 521798651, 588779268, 1262499628, 1936219988, -1685026948, -1011306588, -337586228, 65524, 134217728, 52, 1844505629, 486539326, 1047392492, -333643776, 4091376, -252961536, 15981, 1844505629, 486539326, 1047392492, -333643776, 4091376, -252961536, 15981, 1844505629, 486539326, 1047392492, -333643776, 4091376, -252961536, 15981, 1844505629, 486539326, 1047392492, -333643776, 4091376, -252961536, 15981, 1844505629, 486539326, 1047392492, -333643776, 4091376, -252961536, 15981, 1844505629, 486539326, 1047392492, -333643776, 4091376, -252961536, 15981, 1844505629, 486539326, 1047392492, 0, -2071690108, -2071690108, 2082292072, -2071690106, -2071690108, 813991044, -2071690050, -2071690108, 490825860, -2071689604, -2071690108, -2071690108, -2071675344, -2071690108, 1097368708, -2071561187, -2071690108, -2071690108, -2067910524, -2071690108, 1753515140, -2038686399, -2071690108, -2071690108, -1104116604, -2071690108, -2071690108, 2082292072, -2071690106, -2071690108, 813991044, -2071690050, -2071690108, 132, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);

let numbers: Uint32Array = new Uint32Array(280);

function encodeArray(nums: number[]): Buffer {
  const buffers: Buffer[] = [];

  // Encode each number to a varint and push it to the buffers array
  for (const number of nums) {
    const encoded = varint.encode(number);
    buffers.push(Buffer.from(encoded));
  }

  // Concatenate all buffer parts into a single buffer
  return Buffer.concat(buffers);
}
function decodeArray(buffer: Buffer) {
  let offset = 0;
  let number = 0;

  // Decode each varint from the buffer until the end of the buffer is reached
  let i = 0;
  for (let offset=0; offset < buffer.length; offset += varint.encodingLength(number)) {
    number = varint.decode(buffer, offset);
    numbers[i] = number;
    i++;
  }
}

describe("FastPFor", () => {
  it("VarInt compress", async () => {
    var bytes = encodeArray(FastPFOR_Raw_Test1);
    decodeArray(bytes);

    expect(new Uint32Array(FastPFOR_Raw_Test1)).toEqual(numbers);
  })

  it("FastPFOR decompress (Test 1)", async () => {
    let core = FastPFOR.default();

    var output = new Uint32Array(FastPFOR_Raw_Test1.length);

    let model = {
      input: FastPFOR_Compressed_Test1,
      inpos: 0,
      output: output,
      outpos: 0,
      inlength: FastPFOR_Compressed_Test1.length,
    };
    const outModel = core.uncompress(model);

    var SmallInput: Uint32Array = new Uint32Array(outModel.outpos);
    var SmallOutput: Uint32Array = new Uint32Array(outModel.outpos);

    arraycopy(new Uint32Array(FastPFOR_Raw_Test1), 0, SmallInput, 0, outModel.outpos);
    arraycopy(outModel.output, 0, SmallOutput, 0, outModel.outpos);

    expect(SmallOutput).toEqual(SmallInput);
  });

  it("FastPFOR decompress (Test 2)", async () => {
    let core = FastPFOR.default();

    var output = new Uint32Array(FastPFOR_Raw_Test2.length);

    let model = {
      input: FastPFOR_Compressed_Test2,
      inpos: 0,
      output: output,
      outpos: 0,
      inlength: FastPFOR_Compressed_Test2.length,
    };
    const outModel = core.uncompress(model);

    var SmallInput = new Uint32Array(outModel.outpos);
    var SmallOutput = new Uint32Array(outModel.outpos);

    arraycopy(FastPFOR_Raw_Test2, 0, SmallInput, 0, outModel.outpos);
    arraycopy(output, 0, SmallOutput, 0, outModel.outpos);

    expect(SmallOutput).toEqual(SmallInput);
  });
});
