plugins {
    id 'java-library'
    id('com.diffplug.spotless') version '6.25.0'
}

repositories {
    mavenCentral()
    maven {
        url 'https://maven.ecc.no/releases'
    }
}

group 'com.mlt'
version '1.0-SNAPSHOT'

dependencies {
    implementation 'me.lemire.integercompression:JavaFastPFOR:0.2.1'
    implementation 'io.github.sebasbaumh:mapbox-vector-tile-java:23.1.0'
    implementation 'com.google.guava:guava:33.2.1-jre'
    implementation 'commons-cli:commons-cli:1.8.0'
    implementation 'org.slf4j:slf4j-simple:2.0.13'
    implementation 'no.ecc.vectortile:java-vector-tile:1.3.1'
    implementation 'org.apache.orc:orc-core:1.8.1'
    implementation 'com.github.davidmoten:hilbert-curve:0.2.3'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.2'
}

test {
    useJUnitPlatform()
    testLogging {
        outputs.upToDateWhen {false}
        showStandardStreams = true
        events "passed", "skipped", "failed"
        exceptionFormat "full"
    }
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

spotless {
  java {
    importOrder()
    target 'src/*/java/**/*.java'
    googleJavaFormat()
    removeUnusedImports()
  }
}

task compileWrapper(type: Exec) {
    doFirst {
        if (System.properties['os.name'].toLowerCase().contains('windows')) {
            executable "./resources/compile-windows.bat"
        } else {
            executable "./resources/compile"
        }
    }
}

gradle.projectsEvaluated {
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:unchecked"
    }
}

compileJava.dependsOn compileWrapper

task cli(type: Jar) {
    archiveBaseName = 'mvt2mlt'
    manifest {
        attributes 'Implementation-Title': 'MVT2MLT Converter',
                    'Implementation-Version': archiveVersion,
                    'Main-Class': 'com.mlt.converter.MltCliAdapter'
    }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    manifest.from jar.manifest
    with jar
}
