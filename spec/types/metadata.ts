// @generated by protobuf-ts 2.9.0
// @generated from protobuf file "metadata.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message TileHeader
 */
export interface TileHeader {
    /**
     * @generated from protobuf field: uint32 version = 1;
     */
    version: number;
    /**
     * @generated from protobuf field: uint32 numLayers = 2;
     */
    numLayers: number;
}
/**
 * @generated from protobuf message LayerMetadata
 */
export interface LayerMetadata {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: uint32 numFeatures = 2;
     */
    numFeatures: number;
    /**
     * @generated from protobuf field: repeated ColumnMetadata columnMetadata = 3;
     */
    columnMetadata: ColumnMetadata[];
}
/**
 * @generated from protobuf message ColumnMetadata
 */
export interface ColumnMetadata {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: ColumnDataType dataType = 2;
     */
    dataType: ColumnDataType;
    /**
     * @generated from protobuf field: ColumnEncoding encoding = 3;
     */
    encoding: ColumnEncoding;
    /**
     * @generated from protobuf field: map<string, StreamMetadata> streamMetadata = 4;
     */
    streamMetadata: {
        [key: string]: StreamMetadata;
    };
}
/**
 * @generated from protobuf message StreamMetadata
 */
export interface StreamMetadata {
    /**
     * @generated from protobuf field: uint32 numValues = 1;
     */
    numValues: number;
    /**
     * @generated from protobuf field: uint32 byteLength = 2;
     */
    byteLength: number;
}
/**
 * @generated from protobuf enum ColumnDataType
 */
export enum ColumnDataType {
    /**
     * @generated from protobuf enum value: STRING = 0;
     */
    STRING = 0,
    /**
     * @generated from protobuf enum value: FLOAT = 1;
     */
    FLOAT = 1,
    /**
     * @generated from protobuf enum value: DOUBLE = 2;
     */
    DOUBLE = 2,
    /**
     * @generated from protobuf enum value: INT_64 = 3;
     */
    INT_64 = 3,
    /**
     * @generated from protobuf enum value: UINT_64 = 4;
     */
    UINT_64 = 4,
    /**
     * @generated from protobuf enum value: BOOLEAN = 5;
     */
    BOOLEAN = 5,
    /**
     * @generated from protobuf enum value: GEOMETRY = 6;
     */
    GEOMETRY = 6,
    /**
     * @generated from protobuf enum value: GEOMETRY_M = 7;
     */
    GEOMETRY_M = 7,
    /**
     * @generated from protobuf enum value: GEOMETRY_Z = 8;
     */
    GEOMETRY_Z = 8,
    /**
     * @generated from protobuf enum value: GEOMETRY_ZM = 9;
     */
    GEOMETRY_ZM = 9
}
/**
 * @generated from protobuf enum ColumnEncoding
 */
export enum ColumnEncoding {
    /**
     *
     * String -> no dictionary coding
     * Geometry -> standard unsorted encoding
     *
     *
     * @generated from protobuf enum value: PLAIN = 0;
     */
    PLAIN = 0,
    /**
     * @generated from protobuf enum value: VARINT = 1;
     */
    VARINT = 1,
    /**
     * @generated from protobuf enum value: DELTA_VARINT = 2;
     */
    DELTA_VARINT = 2,
    /**
     * @generated from protobuf enum value: RLE = 3;
     */
    RLE = 3,
    /**
     * @generated from protobuf enum value: BOOLEAN_RLE = 4;
     */
    BOOLEAN_RLE = 4,
    /**
     * @generated from protobuf enum value: BYTE_RLE = 5;
     */
    BYTE_RLE = 5,
    /**
     * @generated from protobuf enum value: DICTIONARY = 6;
     */
    DICTIONARY = 6,
    /**
     * @generated from protobuf enum value: LOCALIZED_DICTIONARY = 7;
     */
    LOCALIZED_DICTIONARY = 7,
    /**
     * @generated from protobuf enum value: ORDERED_GEOMETRY_ENCODING = 8;
     */
    ORDERED_GEOMETRY_ENCODING = 8,
    /**
     * @generated from protobuf enum value: INDEXED_COORDINATE_ENCODING = 9;
     */
    INDEXED_COORDINATE_ENCODING = 9
}
// @generated message type with reflection information, may provide speed optimized methods
class TileHeader$Type extends MessageType<TileHeader> {
    constructor() {
        super("TileHeader", [
            { no: 1, name: "version", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "numLayers", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<TileHeader>): TileHeader {
        const message = { version: 0, numLayers: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TileHeader>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TileHeader): TileHeader {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 version */ 1:
                    message.version = reader.uint32();
                    break;
                case /* uint32 numLayers */ 2:
                    message.numLayers = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TileHeader, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 version = 1; */
        if (message.version !== 0)
            writer.tag(1, WireType.Varint).uint32(message.version);
        /* uint32 numLayers = 2; */
        if (message.numLayers !== 0)
            writer.tag(2, WireType.Varint).uint32(message.numLayers);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TileHeader
 */
export const TileHeader = new TileHeader$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LayerMetadata$Type extends MessageType<LayerMetadata> {
    constructor() {
        super("LayerMetadata", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "numFeatures", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "columnMetadata", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ColumnMetadata }
        ]);
    }
    create(value?: PartialMessage<LayerMetadata>): LayerMetadata {
        const message = { name: "", numFeatures: 0, columnMetadata: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LayerMetadata>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LayerMetadata): LayerMetadata {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* uint32 numFeatures */ 2:
                    message.numFeatures = reader.uint32();
                    break;
                case /* repeated ColumnMetadata columnMetadata */ 3:
                    message.columnMetadata.push(ColumnMetadata.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LayerMetadata, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* uint32 numFeatures = 2; */
        if (message.numFeatures !== 0)
            writer.tag(2, WireType.Varint).uint32(message.numFeatures);
        /* repeated ColumnMetadata columnMetadata = 3; */
        for (let i = 0; i < message.columnMetadata.length; i++)
            ColumnMetadata.internalBinaryWrite(message.columnMetadata[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LayerMetadata
 */
export const LayerMetadata = new LayerMetadata$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ColumnMetadata$Type extends MessageType<ColumnMetadata> {
    constructor() {
        super("ColumnMetadata", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "dataType", kind: "enum", T: () => ["ColumnDataType", ColumnDataType] },
            { no: 3, name: "encoding", kind: "enum", T: () => ["ColumnEncoding", ColumnEncoding] },
            { no: 4, name: "streamMetadata", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => StreamMetadata } }
        ]);
    }
    create(value?: PartialMessage<ColumnMetadata>): ColumnMetadata {
        const message = { name: "", dataType: 0, encoding: 0, streamMetadata: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ColumnMetadata>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ColumnMetadata): ColumnMetadata {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* ColumnDataType dataType */ 2:
                    message.dataType = reader.int32();
                    break;
                case /* ColumnEncoding encoding */ 3:
                    message.encoding = reader.int32();
                    break;
                case /* map<string, StreamMetadata> streamMetadata */ 4:
                    this.binaryReadMap4(message.streamMetadata, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap4(map: ColumnMetadata["streamMetadata"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof ColumnMetadata["streamMetadata"] | undefined, val: ColumnMetadata["streamMetadata"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = StreamMetadata.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field ColumnMetadata.streamMetadata");
            }
        }
        map[key ?? ""] = val ?? StreamMetadata.create();
    }
    internalBinaryWrite(message: ColumnMetadata, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* ColumnDataType dataType = 2; */
        if (message.dataType !== 0)
            writer.tag(2, WireType.Varint).int32(message.dataType);
        /* ColumnEncoding encoding = 3; */
        if (message.encoding !== 0)
            writer.tag(3, WireType.Varint).int32(message.encoding);
        /* map<string, StreamMetadata> streamMetadata = 4; */
        for (let k of Object.keys(message.streamMetadata)) {
            writer.tag(4, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            StreamMetadata.internalBinaryWrite(message.streamMetadata[k], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ColumnMetadata
 */
export const ColumnMetadata = new ColumnMetadata$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StreamMetadata$Type extends MessageType<StreamMetadata> {
    constructor() {
        super("StreamMetadata", [
            { no: 1, name: "numValues", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "byteLength", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<StreamMetadata>): StreamMetadata {
        const message = { numValues: 0, byteLength: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StreamMetadata>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StreamMetadata): StreamMetadata {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 numValues */ 1:
                    message.numValues = reader.uint32();
                    break;
                case /* uint32 byteLength */ 2:
                    message.byteLength = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StreamMetadata, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 numValues = 1; */
        if (message.numValues !== 0)
            writer.tag(1, WireType.Varint).uint32(message.numValues);
        /* uint32 byteLength = 2; */
        if (message.byteLength !== 0)
            writer.tag(2, WireType.Varint).uint32(message.byteLength);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message StreamMetadata
 */
export const StreamMetadata = new StreamMetadata$Type();
